module test_fdpfort
  use funit
  use fdpfort
  implicit none

  character(*), parameter :: config = "./data/write_csv.yaml"
  character(*), parameter :: script = "./data/test_script.sh"
  character(*), parameter :: data_product = "tests/csv"
  character(255) :: token

contains

  @before
  subroutine set_up
    ! Initialises token
    use, intrinsic :: iso_c_binding, only: c_char, c_int

    character(*, kind=c_char), parameter :: token_file = "/.fair/registry/token"
    character(255) :: home_dir
    integer :: io

    call getenv("HOME", home_dir)
    open(newunit=io, file=trim(home_dir) // token_file)
    read(io, *) token
    close(io)
  end subroutine set_up

  @test
  subroutine test_fdp_link_read_write
    ! Test that link_read and link_write work as intended.
    ! TODO API check to ensure things have gone through.
    use, intrinsic :: iso_c_binding, only: c_char, c_int

    type(FdpDataPipeline) :: data_pipeline
    character(:), allocatable :: data_store_path
    integer :: err, io

    ! Init pipeline
    err = fdp_init(data_pipeline, config, script, token)
    @assertEqual(0, err)

    ! Link data product, get path in data store
    call fdp_link_write(data_pipeline, data_product, data_store_path, err)
    @assertEqual(0, err)

    ! Write something to this file
    open(newunit=io, file=data_store_path)
    write(io, '(3I3)') 10, 20, 30
    close(io)

    ! Finalise and reinitialise
    err = fdp_finalise(data_pipeline)
    @assertEqual(0, err)
    err = fdp_init(data_pipeline, config, script, token)
    @assertEqual(0, err)

    ! Link data product as a read product
    call fdp_link_read(data_pipeline, data_product, data_store_path, err)
    @assertEqual(0, err)

    ! Finalise again
    err = fdp_finalise(data_pipeline)
    @assertEqual(0, err)

  end subroutine test_fdp_link_read_write

  @test
  subroutine test_log_levels
    integer :: start_level, err

    start_level = fdp_get_log_level()

    call fdp_set_log_level(FDP_LOG_INFO)
    @assertEqual(FDP_LOG_INFO, fdp_get_log_level())
    err = fdp_log(FDP_LOG_INFO, "Hello world")
    @assertEqual(0, err)

    call fdp_set_log_level(FDP_LOG_DEBUG)
    @assertEqual(FDP_LOG_DEBUG, fdp_get_log_level())
    err = fdp_log(FDP_LOG_DEBUG, "Foo bar")
    @assertEqual(0, err)

    call fdp_set_log_level(start_level)

  end subroutine test_log_levels

end module
