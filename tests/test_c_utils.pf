module test_c_utils
  use funit
  use fdp_c_utils
  implicit none

  contains

    @test
    subroutine test_f2c_str
      use, intrinsic :: iso_c_binding, only: c_char
      character(3, kind=c_char) :: foo
      character(3, kind=c_char) :: bar
      character(6, kind=c_char) :: foobar

      interface
        function is_foo(str) bind(C, name="is_foo")
          use, intrinsic :: iso_c_binding, only: c_ptr, c_int
          implicit none
          type(c_ptr), intent(in), value :: str
          integer(c_int) :: is_foo
        end function is_foo
      end interface

      foo = "foo"
      bar = "bar"
      foobar = "foobar"

      @assertEqual(1, is_foo(fdp_f2c_str(fdp_null_term(foo))))
      @assertEqual(0, is_foo(fdp_f2c_str(fdp_null_term(bar))))
      @assertEqual(0, is_foo(fdp_f2c_str(fdp_null_term(foobar))))
    end subroutine test_f2c_str

    @test
    subroutine test_c2f_str
      use, intrinsic :: iso_c_binding, only: c_char, c_int, c_ptr
      character(3, kind=c_char) :: foo
      character(3, kind=c_char) :: bar
      character(6, kind=c_char) :: foobar
      character(7, kind=c_char) :: foo_buf
      character(7, kind=c_char) :: bar_buf
      character(13, kind=c_char) :: foobar_buf
      character(6, kind=c_char) :: foofoo
      character(6, kind=c_char) :: barbar
      character(12, kind=c_char) :: foobarfoobar
      type(c_ptr) :: foo_ptr, bar_ptr, foobar_ptr

      interface
        subroutine repeat_str(input, output) bind(C, name="repeat_str")
          use, intrinsic :: iso_c_binding, only: c_ptr
          implicit none
          type(c_ptr), intent(in), value :: input
          type(c_ptr), intent(in), value :: output
        end subroutine repeat_str
      end interface

      foo = "foo"
      bar = "bar"
      foobar = "foobar"

      ! Get pointers to buffers
      foo_ptr = fdp_f2c_str(foo_buf)
      bar_ptr = fdp_f2c_str(bar_buf)
      foobar_ptr = fdp_f2c_str(foobar_buf)

      ! Double strings
      call repeat_str(fdp_f2c_str(fdp_null_term(foo)), foo_ptr)
      call repeat_str(fdp_f2c_str(fdp_null_term(bar)), bar_ptr)
      call repeat_str(fdp_f2c_str(fdp_null_term(foobar)), foobar_ptr)

      ! Convert back to Fortran strings
      foofoo = fdp_c2f_str(foo_ptr)
      barbar = fdp_c2f_str(bar_ptr)
      foobarfoobar = fdp_c2f_str(foobar_ptr)

      @assertEqual("foofoo", foofoo)
      @assertEqual("barbar", barbar)
      @assertEqual("foobarfoobar", foobarfoobar)
    end subroutine test_c2f_str

end module test_c_utils
